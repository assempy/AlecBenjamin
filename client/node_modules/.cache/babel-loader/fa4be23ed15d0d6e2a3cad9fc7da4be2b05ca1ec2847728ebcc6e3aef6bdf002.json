{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\web_react\\\\client\\\\src\\\\header.jsx\",\n  _s = $RefreshSig$();\nimport './style.css';\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Header() {\n  _s();\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Для хранения поискового запроса\n  const [songs, setSongs] = useState([]); // Для хранения списка песен\n  const [currentPage, setCurrentPage] = useState(1); // Для текущей страницы\n  const [totalPages, setTotalPages] = useState(1); // Для количества страниц\n  const [error, setError] = useState(\"\"); // Для ошибок, если что-то пойдет не так\n\n  // Функция для отправки запросов с Fetch API\n  const fetchSongs = async () => {\n    try {\n      // Логируем запрос перед отправкой\n      console.log(`Request URL: http://localhost:5000/?page=${currentPage}&search=${searchQuery}`);\n      const response = await fetch(`http://localhost:5000/?page=${currentPage}&search=${searchQuery}`, {\n        headers: {\n          'Cache-Control': 'no-cache' // Отключаем кэширование\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки данных');\n      }\n\n      // Обрабатываем данные в формате JSON\n      const data = await response.json();\n      console.log(\"Received Data:\", data); // Логируем ответ от сервера\n      setSongs(data.songs); // Обновляем состояние с песнями\n      setTotalPages(data.totalPages); // Обновляем количество страниц\n    } catch (error) {\n      setError(error.message); // Устанавливаем ошибку, если что-то пошло не так\n    }\n  };\n  useEffect(() => {\n    // Логируем значения searchQuery и currentPage\n    console.log(\"Search Query:\", searchQuery);\n    console.log(\"Current Page:\", currentPage);\n\n    // Запрашиваем песни при изменении searchQuery или currentPage\n    fetchSongs();\n  }, [searchQuery, currentPage]);\n  useEffect(() => {\n    // Обновляем URL, когда изменяется searchQuery или currentPage\n    navigate(`/search?query=${searchQuery}&page=${currentPage}`);\n  }, [searchQuery, currentPage, navigate]);\n  const goBack = () => {\n    setCurrentPage(prevPage => {\n      const newPage = Math.max(prevPage - 1, 1);\n      console.log(\"Going back to page:\", newPage); // Логируем переход на предыдущую страницу\n      return newPage;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Header\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"image.png\",\n        style: {\n          height: \"37px\",\n          marginTop: \"15px\"\n        },\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: \"20px\",\n          marginLeft: \"10px\"\n        },\n        children: \"Promote your music\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goBack // Переход на предыдущую страницу данных\n        ,\n        style: {\n          marginTop: \"20px\",\n          marginRight: \"10px\",\n          height: \"30px\",\n          width: \"80px\",\n          borderRadius: \"20px\",\n          cursor: \"pointer\",\n          backgroundColor: \"white\",\n          color: \"black\",\n          border: \"none\"\n        },\n        children: \"Go back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for a song\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value) // Обновляем состояние поиска\n        ,\n        style: {\n          width: \"243px\",\n          height: \"33px\",\n          marginTop: \"15px\",\n          marginRight: \"20px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: song.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: song.album\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page \", currentPage, \" of \", totalPages]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Header, \"SuhL2xF07Qo7if61njuB7d0phvc=\", false, function () {\n  return [useNavigate];\n});\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Header","_s","navigate","searchQuery","setSearchQuery","songs","setSongs","currentPage","setCurrentPage","totalPages","setTotalPages","error","setError","fetchSongs","console","log","response","fetch","headers","ok","Error","data","json","message","goBack","prevPage","newPage","Math","max","className","children","style","display","src","height","marginTop","alt","fileName","_jsxFileName","lineNumber","columnNumber","color","fontSize","marginLeft","onClick","marginRight","width","borderRadius","cursor","backgroundColor","border","type","placeholder","value","onChange","e","target","map","song","index","title","album","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/web_react/client/src/header.jsx"],"sourcesContent":["import './style.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    const navigate = useNavigate();\r\n    const [searchQuery, setSearchQuery] = useState(\"\"); // Для хранения поискового запроса\r\n    const [songs, setSongs] = useState([]); // Для хранения списка песен\r\n    const [currentPage, setCurrentPage] = useState(1); // Для текущей страницы\r\n    const [totalPages, setTotalPages] = useState(1); // Для количества страниц\r\n    const [error, setError] = useState(\"\"); // Для ошибок, если что-то пойдет не так\r\n\r\n    // Функция для отправки запросов с Fetch API\r\n    const fetchSongs = async () => {\r\n        try {\r\n            // Логируем запрос перед отправкой\r\n            console.log(`Request URL: http://localhost:5000/?page=${currentPage}&search=${searchQuery}`);\r\n            const response = await fetch(`http://localhost:5000/?page=${currentPage}&search=${searchQuery}`, {\r\n                headers: {\r\n                    'Cache-Control': 'no-cache', // Отключаем кэширование\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Ошибка загрузки данных');\r\n            }\r\n\r\n            // Обрабатываем данные в формате JSON\r\n            const data = await response.json();\r\n            console.log(\"Received Data:\", data); // Логируем ответ от сервера\r\n            setSongs(data.songs); // Обновляем состояние с песнями\r\n            setTotalPages(data.totalPages); // Обновляем количество страниц\r\n        } catch (error) {\r\n            setError(error.message); // Устанавливаем ошибку, если что-то пошло не так\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Логируем значения searchQuery и currentPage\r\n        console.log(\"Search Query:\", searchQuery);\r\n        console.log(\"Current Page:\", currentPage);\r\n\r\n        // Запрашиваем песни при изменении searchQuery или currentPage\r\n        fetchSongs();\r\n    }, [searchQuery, currentPage]);\r\n\r\n    useEffect(() => {\r\n        // Обновляем URL, когда изменяется searchQuery или currentPage\r\n        navigate(`/search?query=${searchQuery}&page=${currentPage}`);\r\n    }, [searchQuery, currentPage, navigate]);\r\n\r\n    const goBack = () => {\r\n        setCurrentPage((prevPage) => {\r\n            const newPage = Math.max(prevPage - 1, 1);\r\n            console.log(\"Going back to page:\", newPage); // Логируем переход на предыдущую страницу\r\n            return newPage;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            <div style={{ display: \"flex\" }}>\r\n                <img src=\"image.png\" style={{ height: \"37px\", marginTop: \"15px\" }} alt=\"Logo\" />\r\n                <p style={{ color: \"white\", fontSize: \"20px\", marginLeft: \"10px\" }}>Promote your music</p>\r\n            </div>\r\n            <div style={{ display: \"flex\" }}>\r\n                <button\r\n                    onClick={goBack} // Переход на предыдущую страницу данных\r\n                    style={{\r\n                        marginTop: \"20px\",\r\n                        marginRight: \"10px\",\r\n                        height: \"30px\",\r\n                        width: \"80px\",\r\n                        borderRadius: \"20px\",\r\n                        cursor: \"pointer\",\r\n                        backgroundColor: \"white\",\r\n                        color: \"black\",\r\n                        border: \"none\"\r\n                    }}\r\n                >\r\n                    Go back\r\n                </button>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search for a song\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)} // Обновляем состояние поиска\r\n                    style={{\r\n                        width: \"243px\",\r\n                        height: \"33px\",\r\n                        marginTop: \"15px\",\r\n                        marginRight: \"20px\"\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            {/* Выводим ошибки, если они есть */}\r\n            {error && <div style={{ color: 'red' }}>{error}</div>}\r\n\r\n            {/* Выводим песни */}\r\n            <div>\r\n                {songs.map((song, index) => (\r\n                    <div key={index}>\r\n                        <h3>{song.title}</h3>\r\n                        <p>{song.album}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Пагинация */}\r\n            <div>\r\n                <span>Page {currentPage} of {totalPages}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}